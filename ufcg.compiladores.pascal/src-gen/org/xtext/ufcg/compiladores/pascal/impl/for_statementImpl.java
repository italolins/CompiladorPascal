/**
 * generated by Xtext 2.10.0
 */
package org.xtext.ufcg.compiladores.pascal.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.ufcg.compiladores.pascal.PascalPackage;
import org.xtext.ufcg.compiladores.pascal.expression;
import org.xtext.ufcg.compiladores.pascal.for_statement;
import org.xtext.ufcg.compiladores.pascal.statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>for statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.ufcg.compiladores.pascal.impl.for_statementImpl#getInitID <em>Init ID</em>}</li>
 *   <li>{@link org.xtext.ufcg.compiladores.pascal.impl.for_statementImpl#getExpressionInit <em>Expression Init</em>}</li>
 *   <li>{@link org.xtext.ufcg.compiladores.pascal.impl.for_statementImpl#getExpressionFin <em>Expression Fin</em>}</li>
 *   <li>{@link org.xtext.ufcg.compiladores.pascal.impl.for_statementImpl#getStmt <em>Stmt</em>}</li>
 * </ul>
 *
 * @generated
 */
public class for_statementImpl extends MinimalEObjectImpl.Container implements for_statement
{
  /**
   * The default value of the '{@link #getInitID() <em>Init ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitID()
   * @generated
   * @ordered
   */
  protected static final String INIT_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getInitID() <em>Init ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitID()
   * @generated
   * @ordered
   */
  protected String initID = INIT_ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getExpressionInit() <em>Expression Init</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionInit()
   * @generated
   * @ordered
   */
  protected expression expressionInit;

  /**
   * The cached value of the '{@link #getExpressionFin() <em>Expression Fin</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionFin()
   * @generated
   * @ordered
   */
  protected expression expressionFin;

  /**
   * The cached value of the '{@link #getStmt() <em>Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStmt()
   * @generated
   * @ordered
   */
  protected statement stmt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected for_statementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.FOR_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getInitID()
  {
    return initID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInitID(String newInitID)
  {
    String oldInitID = initID;
    initID = newInitID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__INIT_ID, oldInitID, initID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression getExpressionInit()
  {
    return expressionInit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionInit(expression newExpressionInit, NotificationChain msgs)
  {
    expression oldExpressionInit = expressionInit;
    expressionInit = newExpressionInit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__EXPRESSION_INIT, oldExpressionInit, newExpressionInit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpressionInit(expression newExpressionInit)
  {
    if (newExpressionInit != expressionInit)
    {
      NotificationChain msgs = null;
      if (expressionInit != null)
        msgs = ((InternalEObject)expressionInit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__EXPRESSION_INIT, null, msgs);
      if (newExpressionInit != null)
        msgs = ((InternalEObject)newExpressionInit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__EXPRESSION_INIT, null, msgs);
      msgs = basicSetExpressionInit(newExpressionInit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__EXPRESSION_INIT, newExpressionInit, newExpressionInit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression getExpressionFin()
  {
    return expressionFin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionFin(expression newExpressionFin, NotificationChain msgs)
  {
    expression oldExpressionFin = expressionFin;
    expressionFin = newExpressionFin;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__EXPRESSION_FIN, oldExpressionFin, newExpressionFin);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpressionFin(expression newExpressionFin)
  {
    if (newExpressionFin != expressionFin)
    {
      NotificationChain msgs = null;
      if (expressionFin != null)
        msgs = ((InternalEObject)expressionFin).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__EXPRESSION_FIN, null, msgs);
      if (newExpressionFin != null)
        msgs = ((InternalEObject)newExpressionFin).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__EXPRESSION_FIN, null, msgs);
      msgs = basicSetExpressionFin(newExpressionFin, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__EXPRESSION_FIN, newExpressionFin, newExpressionFin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public statement getStmt()
  {
    return stmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStmt(statement newStmt, NotificationChain msgs)
  {
    statement oldStmt = stmt;
    stmt = newStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__STMT, oldStmt, newStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStmt(statement newStmt)
  {
    if (newStmt != stmt)
    {
      NotificationChain msgs = null;
      if (stmt != null)
        msgs = ((InternalEObject)stmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__STMT, null, msgs);
      if (newStmt != null)
        msgs = ((InternalEObject)newStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.FOR_STATEMENT__STMT, null, msgs);
      msgs = basicSetStmt(newStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.FOR_STATEMENT__STMT, newStmt, newStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.FOR_STATEMENT__EXPRESSION_INIT:
        return basicSetExpressionInit(null, msgs);
      case PascalPackage.FOR_STATEMENT__EXPRESSION_FIN:
        return basicSetExpressionFin(null, msgs);
      case PascalPackage.FOR_STATEMENT__STMT:
        return basicSetStmt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.FOR_STATEMENT__INIT_ID:
        return getInitID();
      case PascalPackage.FOR_STATEMENT__EXPRESSION_INIT:
        return getExpressionInit();
      case PascalPackage.FOR_STATEMENT__EXPRESSION_FIN:
        return getExpressionFin();
      case PascalPackage.FOR_STATEMENT__STMT:
        return getStmt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.FOR_STATEMENT__INIT_ID:
        setInitID((String)newValue);
        return;
      case PascalPackage.FOR_STATEMENT__EXPRESSION_INIT:
        setExpressionInit((expression)newValue);
        return;
      case PascalPackage.FOR_STATEMENT__EXPRESSION_FIN:
        setExpressionFin((expression)newValue);
        return;
      case PascalPackage.FOR_STATEMENT__STMT:
        setStmt((statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.FOR_STATEMENT__INIT_ID:
        setInitID(INIT_ID_EDEFAULT);
        return;
      case PascalPackage.FOR_STATEMENT__EXPRESSION_INIT:
        setExpressionInit((expression)null);
        return;
      case PascalPackage.FOR_STATEMENT__EXPRESSION_FIN:
        setExpressionFin((expression)null);
        return;
      case PascalPackage.FOR_STATEMENT__STMT:
        setStmt((statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.FOR_STATEMENT__INIT_ID:
        return INIT_ID_EDEFAULT == null ? initID != null : !INIT_ID_EDEFAULT.equals(initID);
      case PascalPackage.FOR_STATEMENT__EXPRESSION_INIT:
        return expressionInit != null;
      case PascalPackage.FOR_STATEMENT__EXPRESSION_FIN:
        return expressionFin != null;
      case PascalPackage.FOR_STATEMENT__STMT:
        return stmt != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (initID: ");
    result.append(initID);
    result.append(')');
    return result.toString();
  }

} //for_statementImpl
