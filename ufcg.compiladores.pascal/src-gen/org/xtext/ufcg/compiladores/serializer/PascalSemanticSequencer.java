/*
 * generated by Xtext 2.10.0
 */
package org.xtext.ufcg.compiladores.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.ufcg.compiladores.pascal.PascalPackage;
import org.xtext.ufcg.compiladores.pascal.abstraction_declaration;
import org.xtext.ufcg.compiladores.pascal.abstraction_heading;
import org.xtext.ufcg.compiladores.pascal.any_number;
import org.xtext.ufcg.compiladores.pascal.array_type;
import org.xtext.ufcg.compiladores.pascal.assignment_statement;
import org.xtext.ufcg.compiladores.pascal.block;
import org.xtext.ufcg.compiladores.pascal.bound_specification;
import org.xtext.ufcg.compiladores.pascal.case_label_list;
import org.xtext.ufcg.compiladores.pascal.compound_statement;
import org.xtext.ufcg.compiladores.pascal.conditional_statement;
import org.xtext.ufcg.compiladores.pascal.conformant_array_schema;
import org.xtext.ufcg.compiladores.pascal.constant;
import org.xtext.ufcg.compiladores.pascal.constant_definition;
import org.xtext.ufcg.compiladores.pascal.constant_definition_part;
import org.xtext.ufcg.compiladores.pascal.declaration_part;
import org.xtext.ufcg.compiladores.pascal.enumerated_type;
import org.xtext.ufcg.compiladores.pascal.expression;
import org.xtext.ufcg.compiladores.pascal.expression_list;
import org.xtext.ufcg.compiladores.pascal.factor;
import org.xtext.ufcg.compiladores.pascal.field_list;
import org.xtext.ufcg.compiladores.pascal.file_type;
import org.xtext.ufcg.compiladores.pascal.fixed_part;
import org.xtext.ufcg.compiladores.pascal.for_statement;
import org.xtext.ufcg.compiladores.pascal.formal_parameter_list;
import org.xtext.ufcg.compiladores.pascal.formal_parameter_section;
import org.xtext.ufcg.compiladores.pascal.function_designator;
import org.xtext.ufcg.compiladores.pascal.goto_statement;
import org.xtext.ufcg.compiladores.pascal.identifier_list;
import org.xtext.ufcg.compiladores.pascal.if_statement;
import org.xtext.ufcg.compiladores.pascal.label;
import org.xtext.ufcg.compiladores.pascal.label_declaration_part;
import org.xtext.ufcg.compiladores.pascal.number;
import org.xtext.ufcg.compiladores.pascal.packed_conformant_array_schema;
import org.xtext.ufcg.compiladores.pascal.parameter_type;
import org.xtext.ufcg.compiladores.pascal.pointer_type;
import org.xtext.ufcg.compiladores.pascal.procedure_and_function_declaration_part;
import org.xtext.ufcg.compiladores.pascal.program;
import org.xtext.ufcg.compiladores.pascal.program_heading;
import org.xtext.ufcg.compiladores.pascal.record_section;
import org.xtext.ufcg.compiladores.pascal.record_type;
import org.xtext.ufcg.compiladores.pascal.repeat_statement;
import org.xtext.ufcg.compiladores.pascal.repetitive_statement;
import org.xtext.ufcg.compiladores.pascal.resto;
import org.xtext.ufcg.compiladores.pascal.set;
import org.xtext.ufcg.compiladores.pascal.set_type;
import org.xtext.ufcg.compiladores.pascal.simple_expression;
import org.xtext.ufcg.compiladores.pascal.simple_statement;
import org.xtext.ufcg.compiladores.pascal.simple_type;
import org.xtext.ufcg.compiladores.pascal.statement;
import org.xtext.ufcg.compiladores.pascal.statement_part;
import org.xtext.ufcg.compiladores.pascal.statement_sequence;
import org.xtext.ufcg.compiladores.pascal.structured_statement;
import org.xtext.ufcg.compiladores.pascal.structured_type;
import org.xtext.ufcg.compiladores.pascal.subrange_type;
import org.xtext.ufcg.compiladores.pascal.tag_field;
import org.xtext.ufcg.compiladores.pascal.term;
import org.xtext.ufcg.compiladores.pascal.type;
import org.xtext.ufcg.compiladores.pascal.type_definition;
import org.xtext.ufcg.compiladores.pascal.type_definition_part;
import org.xtext.ufcg.compiladores.pascal.unpacked_conformant_array_schema;
import org.xtext.ufcg.compiladores.pascal.unpacked_structured_type;
import org.xtext.ufcg.compiladores.pascal.value_parameter_section;
import org.xtext.ufcg.compiladores.pascal.variable;
import org.xtext.ufcg.compiladores.pascal.variable_declaration_part;
import org.xtext.ufcg.compiladores.pascal.variable_identifier_list;
import org.xtext.ufcg.compiladores.pascal.variable_parameter_section;
import org.xtext.ufcg.compiladores.pascal.variable_section;
import org.xtext.ufcg.compiladores.pascal.variant;
import org.xtext.ufcg.compiladores.pascal.variant_part;
import org.xtext.ufcg.compiladores.pascal.while_statement;
import org.xtext.ufcg.compiladores.pascal.with_statement;
import org.xtext.ufcg.compiladores.services.PascalGrammarAccess;

@SuppressWarnings("all")
public class PascalSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PascalGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PascalPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PascalPackage.ABSTRACTION_DECLARATION:
				sequence_function_declaration(context, (abstraction_declaration) semanticObject); 
				return; 
			case PascalPackage.ABSTRACTION_HEADING:
				if (rule == grammarAccess.getFunction_headingRule()) {
					sequence_function_heading(context, (abstraction_heading) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAbstraction_headingRule()) {
					sequence_function_heading_procedure_heading(context, (abstraction_heading) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProcedure_declarationRule()
						|| rule == grammarAccess.getAbstraction_declarationRule()) {
					sequence_procedure_declaration(context, (abstraction_heading) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getProcedure_headingRule()) {
					sequence_procedure_heading(context, (abstraction_heading) semanticObject); 
					return; 
				}
				else break;
			case PascalPackage.ANY_NUMBER:
				if (rule == grammarAccess.getSigned_numberRule()) {
					sequence_signed_number(context, (any_number) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAny_numberRule()) {
					sequence_signed_number_unsigned_number(context, (any_number) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getUnsigned_numberRule()) {
					sequence_unsigned_number(context, (any_number) semanticObject); 
					return; 
				}
				else break;
			case PascalPackage.ARRAY_TYPE:
				sequence_array_type(context, (array_type) semanticObject); 
				return; 
			case PascalPackage.ASSIGNMENT_STATEMENT:
				sequence_assignment_statement(context, (assignment_statement) semanticObject); 
				return; 
			case PascalPackage.BLOCK:
				sequence_block(context, (block) semanticObject); 
				return; 
			case PascalPackage.BOUND_SPECIFICATION:
				sequence_bound_specification(context, (bound_specification) semanticObject); 
				return; 
			case PascalPackage.CASE_LABEL_LIST:
				sequence_case_label_list(context, (case_label_list) semanticObject); 
				return; 
			case PascalPackage.COMPOUND_STATEMENT:
				sequence_compound_statement(context, (compound_statement) semanticObject); 
				return; 
			case PascalPackage.CONDITIONAL_STATEMENT:
				sequence_conditional_statement(context, (conditional_statement) semanticObject); 
				return; 
			case PascalPackage.CONFORMANT_ARRAY_SCHEMA:
				sequence_conformant_array_schema(context, (conformant_array_schema) semanticObject); 
				return; 
			case PascalPackage.CONSTANT:
				sequence_constant(context, (constant) semanticObject); 
				return; 
			case PascalPackage.CONSTANT_DEFINITION:
				sequence_constant_definition(context, (constant_definition) semanticObject); 
				return; 
			case PascalPackage.CONSTANT_DEFINITION_PART:
				sequence_constant_definition_part(context, (constant_definition_part) semanticObject); 
				return; 
			case PascalPackage.DECLARATION_PART:
				sequence_declaration_part(context, (declaration_part) semanticObject); 
				return; 
			case PascalPackage.ENUMERATED_TYPE:
				sequence_enumerated_type(context, (enumerated_type) semanticObject); 
				return; 
			case PascalPackage.EXPRESSION:
				sequence_expression(context, (expression) semanticObject); 
				return; 
			case PascalPackage.EXPRESSION_LIST:
				sequence_expression_list(context, (expression_list) semanticObject); 
				return; 
			case PascalPackage.FACTOR:
				sequence_factor(context, (factor) semanticObject); 
				return; 
			case PascalPackage.FIELD_LIST:
				sequence_field_list(context, (field_list) semanticObject); 
				return; 
			case PascalPackage.FILE_TYPE:
				sequence_file_type(context, (file_type) semanticObject); 
				return; 
			case PascalPackage.FIXED_PART:
				sequence_fixed_part(context, (fixed_part) semanticObject); 
				return; 
			case PascalPackage.FOR_STATEMENT:
				sequence_for_statement(context, (for_statement) semanticObject); 
				return; 
			case PascalPackage.FORMAL_PARAMETER_LIST:
				sequence_formal_parameter_list(context, (formal_parameter_list) semanticObject); 
				return; 
			case PascalPackage.FORMAL_PARAMETER_SECTION:
				sequence_formal_parameter_section(context, (formal_parameter_section) semanticObject); 
				return; 
			case PascalPackage.FUNCTION_DESIGNATOR:
				sequence_function_designator(context, (function_designator) semanticObject); 
				return; 
			case PascalPackage.GOTO_STATEMENT:
				sequence_goto_statement(context, (goto_statement) semanticObject); 
				return; 
			case PascalPackage.IDENTIFIER_LIST:
				sequence_identifier_list(context, (identifier_list) semanticObject); 
				return; 
			case PascalPackage.IF_STATEMENT:
				sequence_if_statement(context, (if_statement) semanticObject); 
				return; 
			case PascalPackage.LABEL:
				sequence_label(context, (label) semanticObject); 
				return; 
			case PascalPackage.LABEL_DECLARATION_PART:
				sequence_label_declaration_part(context, (label_declaration_part) semanticObject); 
				return; 
			case PascalPackage.NUMBER:
				sequence_number(context, (number) semanticObject); 
				return; 
			case PascalPackage.PACKED_CONFORMANT_ARRAY_SCHEMA:
				sequence_packed_conformant_array_schema(context, (packed_conformant_array_schema) semanticObject); 
				return; 
			case PascalPackage.PARAMETER_TYPE:
				sequence_parameter_type(context, (parameter_type) semanticObject); 
				return; 
			case PascalPackage.POINTER_TYPE:
				sequence_pointer_type(context, (pointer_type) semanticObject); 
				return; 
			case PascalPackage.PROCEDURE_AND_FUNCTION_DECLARATION_PART:
				sequence_procedure_and_function_declaration_part(context, (procedure_and_function_declaration_part) semanticObject); 
				return; 
			case PascalPackage.PROGRAM:
				sequence_program(context, (program) semanticObject); 
				return; 
			case PascalPackage.PROGRAM_HEADING:
				sequence_program_heading(context, (program_heading) semanticObject); 
				return; 
			case PascalPackage.RECORD_SECTION:
				sequence_record_section(context, (record_section) semanticObject); 
				return; 
			case PascalPackage.RECORD_TYPE:
				sequence_record_type(context, (record_type) semanticObject); 
				return; 
			case PascalPackage.REPEAT_STATEMENT:
				sequence_repeat_statement(context, (repeat_statement) semanticObject); 
				return; 
			case PascalPackage.REPETITIVE_STATEMENT:
				sequence_repetitive_statement(context, (repetitive_statement) semanticObject); 
				return; 
			case PascalPackage.RESTO:
				sequence_resto(context, (resto) semanticObject); 
				return; 
			case PascalPackage.SET:
				sequence_set(context, (set) semanticObject); 
				return; 
			case PascalPackage.SET_TYPE:
				sequence_set_type(context, (set_type) semanticObject); 
				return; 
			case PascalPackage.SIMPLE_EXPRESSION:
				sequence_simple_expression(context, (simple_expression) semanticObject); 
				return; 
			case PascalPackage.SIMPLE_STATEMENT:
				sequence_simple_statement(context, (simple_statement) semanticObject); 
				return; 
			case PascalPackage.SIMPLE_TYPE:
				sequence_simple_type(context, (simple_type) semanticObject); 
				return; 
			case PascalPackage.STATEMENT:
				sequence_statement(context, (statement) semanticObject); 
				return; 
			case PascalPackage.STATEMENT_PART:
				sequence_statement_part(context, (statement_part) semanticObject); 
				return; 
			case PascalPackage.STATEMENT_SEQUENCE:
				sequence_statement_sequence(context, (statement_sequence) semanticObject); 
				return; 
			case PascalPackage.STRUCTURED_STATEMENT:
				sequence_structured_statement(context, (structured_statement) semanticObject); 
				return; 
			case PascalPackage.STRUCTURED_TYPE:
				sequence_structured_type(context, (structured_type) semanticObject); 
				return; 
			case PascalPackage.SUBRANGE_TYPE:
				sequence_subrange_type(context, (subrange_type) semanticObject); 
				return; 
			case PascalPackage.TAG_FIELD:
				sequence_tag_field(context, (tag_field) semanticObject); 
				return; 
			case PascalPackage.TERM:
				sequence_term(context, (term) semanticObject); 
				return; 
			case PascalPackage.TYPE:
				sequence_type(context, (type) semanticObject); 
				return; 
			case PascalPackage.TYPE_DEFINITION:
				sequence_type_definition(context, (type_definition) semanticObject); 
				return; 
			case PascalPackage.TYPE_DEFINITION_PART:
				sequence_type_definition_part(context, (type_definition_part) semanticObject); 
				return; 
			case PascalPackage.UNPACKED_CONFORMANT_ARRAY_SCHEMA:
				sequence_unpacked_conformant_array_schema(context, (unpacked_conformant_array_schema) semanticObject); 
				return; 
			case PascalPackage.UNPACKED_STRUCTURED_TYPE:
				sequence_unpacked_structured_type(context, (unpacked_structured_type) semanticObject); 
				return; 
			case PascalPackage.VALUE_PARAMETER_SECTION:
				sequence_value_parameter_section(context, (value_parameter_section) semanticObject); 
				return; 
			case PascalPackage.VARIABLE:
				sequence_variable(context, (variable) semanticObject); 
				return; 
			case PascalPackage.VARIABLE_DECLARATION_PART:
				sequence_variable_declaration_part(context, (variable_declaration_part) semanticObject); 
				return; 
			case PascalPackage.VARIABLE_IDENTIFIER_LIST:
				sequence_variable_identifier_list(context, (variable_identifier_list) semanticObject); 
				return; 
			case PascalPackage.VARIABLE_PARAMETER_SECTION:
				sequence_variable_parameter_section(context, (variable_parameter_section) semanticObject); 
				return; 
			case PascalPackage.VARIABLE_SECTION:
				sequence_variable_section(context, (variable_section) semanticObject); 
				return; 
			case PascalPackage.VARIANT:
				sequence_variant(context, (variant) semanticObject); 
				return; 
			case PascalPackage.VARIANT_PART:
				sequence_variant_part(context, (variant_part) semanticObject); 
				return; 
			case PascalPackage.WHILE_STATEMENT:
				sequence_while_statement(context, (while_statement) semanticObject); 
				return; 
			case PascalPackage.WITH_STATEMENT:
				sequence_with_statement(context, (with_statement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     array_type returns array_type
	 *
	 * Constraint:
	 *     (indexes+=simple_type indexes+=simple_type* type=type)
	 */
	protected void sequence_array_type(ISerializationContext context, array_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     assignment_statement returns assignment_statement
	 *
	 * Constraint:
	 *     (variable=variable expression=expression)
	 */
	protected void sequence_assignment_statement(ISerializationContext context, assignment_statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.ASSIGNMENT_STATEMENT__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.ASSIGNMENT_STATEMENT__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.ASSIGNMENT_STATEMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.ASSIGNMENT_STATEMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignment_statementAccess().getVariableVariableParserRuleCall_0_0(), semanticObject.getVariable());
		feeder.accept(grammarAccess.getAssignment_statementAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     block returns block
	 *
	 * Constraint:
	 *     (declaration=declaration_part statement=statement_part)
	 */
	protected void sequence_block(ISerializationContext context, block semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.BLOCK__DECLARATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.BLOCK__DECLARATION));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.BLOCK__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.BLOCK__STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBlockAccess().getDeclarationDeclaration_partParserRuleCall_0_0(), semanticObject.getDeclaration());
		feeder.accept(grammarAccess.getBlockAccess().getStatementStatement_partParserRuleCall_1_0(), semanticObject.getStatement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     bound_specification returns bound_specification
	 *
	 * Constraint:
	 *     (init=ID fin=ID name=ID)
	 */
	protected void sequence_bound_specification(ISerializationContext context, bound_specification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.BOUND_SPECIFICATION__INIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.BOUND_SPECIFICATION__INIT));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.BOUND_SPECIFICATION__FIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.BOUND_SPECIFICATION__FIN));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.BOUND_SPECIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.BOUND_SPECIFICATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBound_specificationAccess().getInitIDTerminalRuleCall_0_0(), semanticObject.getInit());
		feeder.accept(grammarAccess.getBound_specificationAccess().getFinIDTerminalRuleCall_2_0(), semanticObject.getFin());
		feeder.accept(grammarAccess.getBound_specificationAccess().getNameIDTerminalRuleCall_4_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     case_label_list returns case_label_list
	 *
	 * Constraint:
	 *     (constants+=constant constants+=constant*)
	 */
	protected void sequence_case_label_list(ISerializationContext context, case_label_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     compound_statement returns compound_statement
	 *
	 * Constraint:
	 *     sequence=statement_sequence
	 */
	protected void sequence_compound_statement(ISerializationContext context, compound_statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.COMPOUND_STATEMENT__SEQUENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.COMPOUND_STATEMENT__SEQUENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompound_statementAccess().getSequenceStatement_sequenceParserRuleCall_1_0(), semanticObject.getSequence());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     conditional_statement returns conditional_statement
	 *
	 * Constraint:
	 *     ifStmt=if_statement
	 */
	protected void sequence_conditional_statement(ISerializationContext context, conditional_statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.CONDITIONAL_STATEMENT__IF_STMT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.CONDITIONAL_STATEMENT__IF_STMT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditional_statementAccess().getIfStmtIf_statementParserRuleCall_0(), semanticObject.getIfStmt());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     conformant_array_schema returns conformant_array_schema
	 *
	 * Constraint:
	 *     (packed=packed_conformant_array_schema | unpacked=unpacked_conformant_array_schema)
	 */
	protected void sequence_conformant_array_schema(ISerializationContext context, conformant_array_schema semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     constant returns constant
	 *
	 * Constraint:
	 *     ((opterator=ADDITION_OPERATOR? (name=ID | number=number)) | string=STRING | boolLiteral='true' | boolLiteral='false' | nil='nil')
	 */
	protected void sequence_constant(ISerializationContext context, constant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     constant_definition returns constant_definition
	 *
	 * Constraint:
	 *     (name=ID const=constant)
	 */
	protected void sequence_constant_definition(ISerializationContext context, constant_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.CONSTANT_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.CONSTANT_DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.CONSTANT_DEFINITION__CONST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.CONSTANT_DEFINITION__CONST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstant_definitionAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConstant_definitionAccess().getConstConstantParserRuleCall_2_0(), semanticObject.getConst());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     constant_definition_part returns constant_definition_part
	 *
	 * Constraint:
	 *     consts+=constant_definition+
	 */
	protected void sequence_constant_definition_part(ISerializationContext context, constant_definition_part semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     declaration_part returns declaration_part
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             label_decl=label_declaration_part 
	 *             ((type_def=type_definition_part abstraction=procedure_and_function_declaration_part) | abstraction=procedure_and_function_declaration_part)
	 *         ) | 
	 *         (
	 *             ((label_decl=label_declaration_part constant_def=constant_definition_part) | constant_def=constant_definition_part) 
	 *             ((type_def=type_definition_part abstraction=procedure_and_function_declaration_part) | abstraction=procedure_and_function_declaration_part)
	 *         ) | 
	 *         (
	 *             (
	 *                 (label_decl=label_declaration_part ((constant_def=constant_definition_part type_def=type_definition_part) | type_def=type_definition_part)) | 
	 *                 (constant_def=constant_definition_part type_def=type_definition_part) | 
	 *                 type_def=type_definition_part
	 *             )? 
	 *             variable_decl=variable_declaration_part 
	 *             abstraction=procedure_and_function_declaration_part
	 *         ) | 
	 *         (type_def=type_definition_part abstraction=procedure_and_function_declaration_part) | 
	 *         abstraction=procedure_and_function_declaration_part
	 *     )?
	 */
	protected void sequence_declaration_part(ISerializationContext context, declaration_part semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     enumerated_type returns enumerated_type
	 *
	 * Constraint:
	 *     identifiers=identifier_list
	 */
	protected void sequence_enumerated_type(ISerializationContext context, enumerated_type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.ENUMERATED_TYPE__IDENTIFIERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.ENUMERATED_TYPE__IDENTIFIERS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEnumerated_typeAccess().getIdentifiersIdentifier_listParserRuleCall_1_0(), semanticObject.getIdentifiers());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     expression returns expression
	 *
	 * Constraint:
	 *     (expressions+=simple_expression ((operators+=RELATIONAL_OPERATOR | operators+='in' | operators+='=') expressions+=simple_expression)?)
	 */
	protected void sequence_expression(ISerializationContext context, expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     expression_list returns expression_list
	 *
	 * Constraint:
	 *     (expressions+=expression expressions+=expression*)
	 */
	protected void sequence_expression_list(ISerializationContext context, expression_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     factor returns factor
	 *
	 * Constraint:
	 *     (
	 *         variable=variable | 
	 *         number=number | 
	 *         string=STRING | 
	 *         set=set | 
	 *         nil?='nil' | 
	 *         function=function_designator | 
	 *         expression=expression | 
	 *         not=factor | 
	 *         boolean='true' | 
	 *         boolean='false'
	 *     )
	 */
	protected void sequence_factor(ISerializationContext context, factor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     field_list returns field_list
	 *
	 * Constraint:
	 *     ((fixed=fixed_part variants+=variant_part?) | variants+=variant_part)
	 */
	protected void sequence_field_list(ISerializationContext context, field_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     file_type returns file_type
	 *
	 * Constraint:
	 *     type=type
	 */
	protected void sequence_file_type(ISerializationContext context, file_type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.FILE_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.FILE_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFile_typeAccess().getTypeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     fixed_part returns fixed_part
	 *
	 * Constraint:
	 *     (sections+=record_section sections+=record_section*)
	 */
	protected void sequence_fixed_part(ISerializationContext context, fixed_part semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     for_statement returns for_statement
	 *
	 * Constraint:
	 *     (initID=ID expressionInit=expression expressionFin=expression stmt=statement)
	 */
	protected void sequence_for_statement(ISerializationContext context, for_statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.FOR_STATEMENT__INIT_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.FOR_STATEMENT__INIT_ID));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.FOR_STATEMENT__EXPRESSION_INIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.FOR_STATEMENT__EXPRESSION_INIT));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.FOR_STATEMENT__EXPRESSION_FIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.FOR_STATEMENT__EXPRESSION_FIN));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.FOR_STATEMENT__STMT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.FOR_STATEMENT__STMT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFor_statementAccess().getInitIDIDTerminalRuleCall_1_0(), semanticObject.getInitID());
		feeder.accept(grammarAccess.getFor_statementAccess().getExpressionInitExpressionParserRuleCall_3_0(), semanticObject.getExpressionInit());
		feeder.accept(grammarAccess.getFor_statementAccess().getExpressionFinExpressionParserRuleCall_5_0(), semanticObject.getExpressionFin());
		feeder.accept(grammarAccess.getFor_statementAccess().getStmtStatementParserRuleCall_7_0(), semanticObject.getStmt());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     formal_parameter_list returns formal_parameter_list
	 *
	 * Constraint:
	 *     (parameters+=formal_parameter_section parameters+=formal_parameter_section*)
	 */
	protected void sequence_formal_parameter_list(ISerializationContext context, formal_parameter_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     formal_parameter_section returns formal_parameter_section
	 *
	 * Constraint:
	 *     (value=value_parameter_section | variable=variable_parameter_section | procedure=procedure_heading | function=function_heading)
	 */
	protected void sequence_formal_parameter_section(ISerializationContext context, formal_parameter_section semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     function_declaration returns abstraction_declaration
	 *     abstraction_declaration returns abstraction_declaration
	 *
	 * Constraint:
	 *     (heading=function_heading (block=block | forward?='forward'))
	 */
	protected void sequence_function_declaration(ISerializationContext context, abstraction_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     function_designator returns function_designator
	 *
	 * Constraint:
	 *     (name=ID expressions=expression_list?)
	 */
	protected void sequence_function_designator(ISerializationContext context, function_designator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     function_heading returns abstraction_heading
	 *
	 * Constraint:
	 *     (name=ID parameters=formal_parameter_list? resultType=ID)
	 */
	protected void sequence_function_heading(ISerializationContext context, abstraction_heading semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     abstraction_heading returns abstraction_heading
	 *
	 * Constraint:
	 *     ((name=ID parameters=formal_parameter_list?) | (name=ID parameters=formal_parameter_list? resultType=ID))
	 */
	protected void sequence_function_heading_procedure_heading(ISerializationContext context, abstraction_heading semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     goto_statement returns goto_statement
	 *
	 * Constraint:
	 *     label=label
	 */
	protected void sequence_goto_statement(ISerializationContext context, goto_statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.GOTO_STATEMENT__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.GOTO_STATEMENT__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoto_statementAccess().getLabelLabelParserRuleCall_1_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     identifier_list returns identifier_list
	 *
	 * Constraint:
	 *     (ids+=ID ids+=ID*)
	 */
	protected void sequence_identifier_list(ISerializationContext context, identifier_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     if_statement returns if_statement
	 *
	 * Constraint:
	 *     (expression=expression ifStatement=statement elseStatement=statement?)
	 */
	protected void sequence_if_statement(ISerializationContext context, if_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     label_declaration_part returns label_declaration_part
	 *
	 * Constraint:
	 *     (labels+=label labels+=label*)
	 */
	protected void sequence_label_declaration_part(ISerializationContext context, label_declaration_part semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     label returns label
	 *
	 * Constraint:
	 *     (number=SIGNED_INTEGER_NUMBER | number=INTEGER_NUMBER)
	 */
	protected void sequence_label(ISerializationContext context, label semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     number returns number
	 *
	 * Constraint:
	 *     number=any_number
	 */
	protected void sequence_number(ISerializationContext context, number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.NUMBER__NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.NUMBER__NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getNumberAny_numberParserRuleCall_0(), semanticObject.getNumber());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     packed_conformant_array_schema returns packed_conformant_array_schema
	 *
	 * Constraint:
	 *     (bound=bound_specification name=ID)
	 */
	protected void sequence_packed_conformant_array_schema(ISerializationContext context, packed_conformant_array_schema semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.PACKED_CONFORMANT_ARRAY_SCHEMA__BOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.PACKED_CONFORMANT_ARRAY_SCHEMA__BOUND));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.PACKED_CONFORMANT_ARRAY_SCHEMA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.PACKED_CONFORMANT_ARRAY_SCHEMA__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPacked_conformant_array_schemaAccess().getBoundBound_specificationParserRuleCall_3_0(), semanticObject.getBound());
		feeder.accept(grammarAccess.getPacked_conformant_array_schemaAccess().getNameIDTerminalRuleCall_6_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     parameter_type returns parameter_type
	 *
	 * Constraint:
	 *     (name=ID | array=conformant_array_schema)
	 */
	protected void sequence_parameter_type(ISerializationContext context, parameter_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     pointer_type returns pointer_type
	 *
	 * Constraint:
	 *     type=type
	 */
	protected void sequence_pointer_type(ISerializationContext context, pointer_type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.POINTER_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.POINTER_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPointer_typeAccess().getTypeTypeParserRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     procedure_and_function_declaration_part returns procedure_and_function_declaration_part
	 *
	 * Constraint:
	 *     (procedures+=procedure_declaration | functions+=function_declaration)+
	 */
	protected void sequence_procedure_and_function_declaration_part(ISerializationContext context, procedure_and_function_declaration_part semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     procedure_declaration returns abstraction_heading
	 *     abstraction_declaration returns abstraction_heading
	 *
	 * Constraint:
	 *     (heading=procedure_heading (block=block | forward?='forward'))
	 */
	protected void sequence_procedure_declaration(ISerializationContext context, abstraction_heading semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     procedure_heading returns abstraction_heading
	 *
	 * Constraint:
	 *     (name=ID parameters=formal_parameter_list?)
	 */
	protected void sequence_procedure_heading(ISerializationContext context, abstraction_heading semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     program_heading returns program_heading
	 *
	 * Constraint:
	 *     (name=ID identifiers=identifier_list?)
	 */
	protected void sequence_program_heading(ISerializationContext context, program_heading semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     program returns program
	 *
	 * Constraint:
	 *     (heading=program_heading block=block)
	 */
	protected void sequence_program(ISerializationContext context, program semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.PROGRAM__HEADING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.PROGRAM__HEADING));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.PROGRAM__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.PROGRAM__BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProgramAccess().getHeadingProgram_headingParserRuleCall_0_0(), semanticObject.getHeading());
		feeder.accept(grammarAccess.getProgramAccess().getBlockBlockParserRuleCall_1_0(), semanticObject.getBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     record_section returns record_section
	 *
	 * Constraint:
	 *     (identifiers=identifier_list type=type)
	 */
	protected void sequence_record_section(ISerializationContext context, record_section semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.RECORD_SECTION__IDENTIFIERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.RECORD_SECTION__IDENTIFIERS));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.RECORD_SECTION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.RECORD_SECTION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRecord_sectionAccess().getIdentifiersIdentifier_listParserRuleCall_0_0(), semanticObject.getIdentifiers());
		feeder.accept(grammarAccess.getRecord_sectionAccess().getTypeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     record_type returns record_type
	 *
	 * Constraint:
	 *     (record='record' fields=field_list? end='end')
	 */
	protected void sequence_record_type(ISerializationContext context, record_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     repeat_statement returns repeat_statement
	 *
	 * Constraint:
	 *     (sequence=statement_sequence expression=expression)
	 */
	protected void sequence_repeat_statement(ISerializationContext context, repeat_statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.REPEAT_STATEMENT__SEQUENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.REPEAT_STATEMENT__SEQUENCE));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.REPEAT_STATEMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.REPEAT_STATEMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRepeat_statementAccess().getSequenceStatement_sequenceParserRuleCall_1_0(), semanticObject.getSequence());
		feeder.accept(grammarAccess.getRepeat_statementAccess().getExpressionExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     repetitive_statement returns repetitive_statement
	 *
	 * Constraint:
	 *     (while=while_statement | repeat=repeat_statement | for=for_statement)
	 */
	protected void sequence_repetitive_statement(ISerializationContext context, repetitive_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     resto returns resto
	 *
	 * Constraint:
	 *     ((expressions=expression_list array=resto) | (accessor?='.' name=ID variable=resto) | pointer=resto)
	 */
	protected void sequence_resto(ISerializationContext context, resto semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     set returns set
	 *
	 * Constraint:
	 *     (brackets+='[' expressions=expression_list? brackets+=']')
	 */
	protected void sequence_set(ISerializationContext context, set semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     set_type returns set_type
	 *
	 * Constraint:
	 *     type=type
	 */
	protected void sequence_set_type(ISerializationContext context, set_type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.SET_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.SET_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSet_typeAccess().getTypeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     signed_number returns any_number
	 *
	 * Constraint:
	 *     (integer=SIGNED_INTEGER_NUMBER | real=SIGNED_REAL_NUMBER)
	 */
	protected void sequence_signed_number(ISerializationContext context, any_number semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     any_number returns any_number
	 *
	 * Constraint:
	 *     (integer=INTEGER_NUMBER | real=REAL_NUMBER | integer=SIGNED_INTEGER_NUMBER | real=SIGNED_REAL_NUMBER)
	 */
	protected void sequence_signed_number_unsigned_number(ISerializationContext context, any_number semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     simple_expression returns simple_expression
	 *
	 * Constraint:
	 *     (prefixOperator=ADDITION_OPERATOR? terms+=term (terms+=unsigned_number? ((operators+=ADDITION_OPERATOR | operators+='or') terms+=term)?)+)
	 */
	protected void sequence_simple_expression(ISerializationContext context, simple_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     simple_statement returns simple_statement
	 *
	 * Constraint:
	 *     (assignment=assignment_statement | function=function_designator | goto=goto_statement | function_noargs=ID)
	 */
	protected void sequence_simple_statement(ISerializationContext context, simple_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     simple_type returns simple_type
	 *
	 * Constraint:
	 *     (subrange=subrange_type | enumerated=enumerated_type | name=ID)
	 */
	protected void sequence_simple_type(ISerializationContext context, simple_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     statement_part returns statement_part
	 *
	 * Constraint:
	 *     sequence=statement_sequence
	 */
	protected void sequence_statement_part(ISerializationContext context, statement_part semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.STATEMENT_PART__SEQUENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.STATEMENT_PART__SEQUENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatement_partAccess().getSequenceStatement_sequenceParserRuleCall_1_0(), semanticObject.getSequence());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     statement_sequence returns statement_sequence
	 *
	 * Constraint:
	 *     (statements+=statement statements+=statement*)
	 */
	protected void sequence_statement_sequence(ISerializationContext context, statement_sequence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     statement returns statement
	 *
	 * Constraint:
	 *     (label=label? (simple=simple_statement | structured=structured_statement))
	 */
	protected void sequence_statement(ISerializationContext context, statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structured_statement returns structured_statement
	 *
	 * Constraint:
	 *     (compound=compound_statement | repetitive=repetitive_statement | conditional=conditional_statement | with_stt=with_statement)
	 */
	protected void sequence_structured_statement(ISerializationContext context, structured_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structured_type returns structured_type
	 *
	 * Constraint:
	 *     (packed?='packed'? type=unpacked_structured_type)
	 */
	protected void sequence_structured_type(ISerializationContext context, structured_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     subrange_type returns subrange_type
	 *
	 * Constraint:
	 *     ((initialConst=constant finalConst=constant) | (subrange=NUMERIC_SUBRANGE const=constant))
	 */
	protected void sequence_subrange_type(ISerializationContext context, subrange_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     tag_field returns tag_field
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_tag_field(ISerializationContext context, tag_field semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.TAG_FIELD__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.TAG_FIELD__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTag_fieldAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     term returns term
	 *
	 * Constraint:
	 *     (factors+=factor ((operators+=MULTIPLICATION_OPERATOR | operators+='div' | operators+='mod' | operators+='and') factors+=factor)*)
	 */
	protected void sequence_term(ISerializationContext context, term semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     type_definition_part returns type_definition_part
	 *
	 * Constraint:
	 *     types+=type_definition+
	 */
	protected void sequence_type_definition_part(ISerializationContext context, type_definition_part semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     type_definition returns type_definition
	 *
	 * Constraint:
	 *     (name=ID type=type)
	 */
	protected void sequence_type_definition(ISerializationContext context, type_definition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.TYPE_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.TYPE_DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.TYPE_DEFINITION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.TYPE_DEFINITION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getType_definitionAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getType_definitionAccess().getTypeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     type returns type
	 *
	 * Constraint:
	 *     (simple=simple_type | structured=structured_type | pointer=pointer_type)
	 */
	protected void sequence_type(ISerializationContext context, type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     unpacked_conformant_array_schema returns unpacked_conformant_array_schema
	 *
	 * Constraint:
	 *     (bounds+=bound_specification bounds+=bound_specification* type=parameter_type)
	 */
	protected void sequence_unpacked_conformant_array_schema(ISerializationContext context, unpacked_conformant_array_schema semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     unpacked_structured_type returns unpacked_structured_type
	 *
	 * Constraint:
	 *     (array=array_type | record=record_type | set=set_type | file=file_type)
	 */
	protected void sequence_unpacked_structured_type(ISerializationContext context, unpacked_structured_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     unsigned_number returns any_number
	 *
	 * Constraint:
	 *     (integer=INTEGER_NUMBER | real=REAL_NUMBER)
	 */
	protected void sequence_unsigned_number(ISerializationContext context, any_number semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     value_parameter_section returns value_parameter_section
	 *
	 * Constraint:
	 *     (identifiers=identifier_list type=parameter_type)
	 */
	protected void sequence_value_parameter_section(ISerializationContext context, value_parameter_section semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.VALUE_PARAMETER_SECTION__IDENTIFIERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.VALUE_PARAMETER_SECTION__IDENTIFIERS));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.VALUE_PARAMETER_SECTION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.VALUE_PARAMETER_SECTION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValue_parameter_sectionAccess().getIdentifiersIdentifier_listParserRuleCall_0_0(), semanticObject.getIdentifiers());
		feeder.accept(grammarAccess.getValue_parameter_sectionAccess().getTypeParameter_typeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     variable_declaration_part returns variable_declaration_part
	 *
	 * Constraint:
	 *     (sections+=variable_section sections+=variable_section*)
	 */
	protected void sequence_variable_declaration_part(ISerializationContext context, variable_declaration_part semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     variable_identifier_list returns variable_identifier_list
	 *
	 * Constraint:
	 *     (names+=ID names+=ID*)
	 */
	protected void sequence_variable_identifier_list(ISerializationContext context, variable_identifier_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     variable_parameter_section returns variable_parameter_section
	 *
	 * Constraint:
	 *     (identifiers=identifier_list type=parameter_type)
	 */
	protected void sequence_variable_parameter_section(ISerializationContext context, variable_parameter_section semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.VARIABLE_PARAMETER_SECTION__IDENTIFIERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.VARIABLE_PARAMETER_SECTION__IDENTIFIERS));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.VARIABLE_PARAMETER_SECTION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.VARIABLE_PARAMETER_SECTION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariable_parameter_sectionAccess().getIdentifiersIdentifier_listParserRuleCall_1_0(), semanticObject.getIdentifiers());
		feeder.accept(grammarAccess.getVariable_parameter_sectionAccess().getTypeParameter_typeParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     variable_section returns variable_section
	 *
	 * Constraint:
	 *     (identifiers=variable_identifier_list type=type)
	 */
	protected void sequence_variable_section(ISerializationContext context, variable_section semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.VARIABLE_SECTION__IDENTIFIERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.VARIABLE_SECTION__IDENTIFIERS));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.VARIABLE_SECTION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.VARIABLE_SECTION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariable_sectionAccess().getIdentifiersVariable_identifier_listParserRuleCall_0_0(), semanticObject.getIdentifiers());
		feeder.accept(grammarAccess.getVariable_sectionAccess().getTypeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     variable returns variable
	 *
	 * Constraint:
	 *     (name=ID variable=resto)
	 */
	protected void sequence_variable(ISerializationContext context, variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.VARIABLE__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.VARIABLE__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableAccess().getVariableRestoParserRuleCall_1_0(), semanticObject.getVariable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     variant_part returns variant_part
	 *
	 * Constraint:
	 *     (tag=tag_field? name=ID variants+=variant variants+=variant*)
	 */
	protected void sequence_variant_part(ISerializationContext context, variant_part semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     variant returns variant
	 *
	 * Constraint:
	 *     (labels=case_label_list fields=field_list?)
	 */
	protected void sequence_variant(ISerializationContext context, variant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     while_statement returns while_statement
	 *
	 * Constraint:
	 *     (expression=expression statement=statement)
	 */
	protected void sequence_while_statement(ISerializationContext context, while_statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.WHILE_STATEMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.WHILE_STATEMENT__EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, PascalPackage.Literals.WHILE_STATEMENT__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PascalPackage.Literals.WHILE_STATEMENT__STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWhile_statementAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.accept(grammarAccess.getWhile_statementAccess().getStatementStatementParserRuleCall_3_0(), semanticObject.getStatement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     with_statement returns with_statement
	 *
	 * Constraint:
	 *     (record=ID records+=ID* stmt=statement)
	 */
	protected void sequence_with_statement(ISerializationContext context, with_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
