grammar org.xtext.ufcg.compiladores.Pascal with org.eclipse.xtext.common.Terminals

generate pascal "http://www.xtext.org/ufcg/compiladores/Pascal"

//===============================================
//===          Programs and Blocks            ===
//===============================================

program:
	heading=program_heading block=block "." 
;

program_heading: 
	"program" name=ID ("(" identifiers=identifier_list ")")? ";"	
;

block:
	declaration=declaration_part statement=statement_part
;

declaration_part:
	(label_decl=label_declaration_part)?
	(constant_def=constant_definition_part )? 
	(type_def=type_definition_part)?
	(variable_decl=variable_declaration_part)? 
	(abstraction=procedure_and_function_declaration_part)? 
;

label_declaration_part:
	"label" labels+=label ("," labels+=label)* ";"
;

constant_definition_part:
	"const" (consts+=constant_definition ";")+	
;

constant_definition:
	name=ID "=" const=constant	
;

type_definition_part:
	"type" (types+=type_definition ";")+	
;

type_definition:
	name=ID "=" type=type	
;

variable_declaration_part:
	"var" sections+=variable_section ";" (sections+=variable_section ";")*
;

variable_section:
	identifiers=variable_identifier_list ":" type=type	
; 
 
procedure_and_function_declaration_part:
	((procedures+=procedure_declaration | functions+=function_declaration) ";")+
;

procedure_declaration returns abstraction_heading:
	heading=procedure_heading ";" (block=block | forward?="forward")
;
 
function_declaration returns abstraction_declaration:
	heading=function_heading ";" (block=block | forward?="forward") 
;

statement_part:
	"begin" sequence=statement_sequence "end"	
;

//=============================================
//=== Procedures and Function Definitions   ===
//=============================================

procedure_heading returns abstraction_heading: 
	"procedure" name=ID (parameters=formal_parameter_list)?	
;

function_heading returns abstraction_heading: 
	"function" name=ID (parameters=formal_parameter_list)? ":" resultType=ID
;

formal_parameter_list:
	"("parameters+=formal_parameter_section (";" parameters+=formal_parameter_section)*")"	
;

formal_parameter_section:  
	value=value_parameter_section 
	| variable=variable_parameter_section 
	| procedure=procedure_heading  //procedure-parameter-section e function leval direto aos heading
	| function=function_heading	   //desnecessario colocar essas duas regras.
;

value_parameter_section:
	identifiers=identifier_list ":" type=parameter_type	
;

variable_parameter_section:
	"var" identifiers=identifier_list ":" type=parameter_type	
;

parameter_type:
	name=ID 
	| array=conformant_array_schema	
;

conformant_array_schema:
	packed=packed_conformant_array_schema 
	| unpacked=unpacked_conformant_array_schema	
;

packed_conformant_array_schema:
	"packed" "array" "["bound=bound_specification"]" "of" name=ID	
;

unpacked_conformant_array_schema:
	"array" "["bounds+=bound_specification (";" bounds+=bound_specification)*"]" "of" type=parameter_type	
;

bound_specification:
	init=ID ".." fin=ID ":" name=ID	// Ordinal-type-identifier leva a um ID, regra desnecessaria
;

statement_sequence:
	statements+=statement (";" statements+=statement)*
;
 
statement:  
	(label=label ":")? (simple=simple_statement | structured=structured_statement)
;

simple_statement:
	(
		assignment=assignment_statement 
		| function=function_designator 
		| goto=goto_statement
		| function_noargs=ID
	)?	
;

assignment_statement: 
	variable=variable ":=" expression=expression	
;

goto_statement:
	"goto" label=label	
;

structured_statement: 
	compound=compound_statement
	| repetitive=repetitive_statement
	| conditional=conditional_statement
	| with_stt=with_statement
;

compound_statement:
	"begin" sequence=statement_sequence "end"
;

repetitive_statement:
	while=while_statement
	| repeat=repeat_statement
	| for=for_statement
;

while_statement:
	"while" expression=expression "do" statement=statement
;

repeat_statement:
	"repeat" sequence=statement_sequence "until" expression=expression
;

for_statement:
	"for" initID=ID ":=" expressionInit=expression ("to" | "downto") expressionFin=expression "do" stmt=statement
;

conditional_statement: 
	ifStmt=if_statement
;

if_statement:
	"if" expression=expression "then" ifStatement=statement ( "else" elseStatement=statement )	?
;

with_statement:
	"with" record=ID ("," records+=ID)* "do" stmt=statement
;
//=======================================
//===          Expressions            ===
//=======================================

expression:
	expressions+=simple_expression (
		(operators+=RELATIONAL_OPERATOR 
		| operators+="in" 
		| operators+="="
	) expressions+=simple_expression)?
; 

simple_expression hidden(WS): 
	( prefixOperator=ADDITION_OPERATOR )? terms+=term 
	((operators+=ADDITION_OPERATOR | operators+="or") terms+=term | terms+=unsigned_number)*
;
  
term:
	factors+=factor (
		(operators+=MULTIPLICATION_OPERATOR 
		| operators+="div" 
		| operators+="mod" 
		| operators+="and"
	) factors+=factor)* 
;

factor: 
	variable=variable 
	| number=number 
	| string=STRING 
	| set=set 
	| nil?="nil" 
	| function=function_designator 
	| "("expression=expression")" 
	| "not" not=factor
	| boolean="true" 
	| boolean="false" 
;

terminal RELATIONAL_OPERATOR:
	"=" | "<>" | "<" | "<=" | ">" | ">=" 
;

terminal ADDITION_OPERATOR:
	"+" | "-" 	
; 

terminal MULTIPLICATION_OPERATOR:
	"*" | "/" 
;

variable: // Tem recursao à esquerda em component_variable
	name=ID variable=resto
;
    
resto:
	(
		"["expressions=expression_list"]" array=resto // component_variable 
		| accessor?="." name=ID variable=resto //field_designator
		| "^" pointer=resto // file buffer
	)?
; 

set:
	brackets+="["expressions=expression_list? brackets+="]" //set de sets	
;

expression_list:
	expressions+=expression ("," expressions+=expression)* 	
;

function_designator:
	name=ID "(" expressions=expression_list ? ")"
;

// Types

type:
	simple=simple_type 
	| structured=structured_type 
	| pointer=pointer_type 
;

simple_type:
	subrange=subrange_type 
	| enumerated=enumerated_type 
	| name=ID
;

enumerated_type:
	"("identifiers=identifier_list")"
;

subrange_type: 
	 initialConst=constant ".." finalConst=constant // lower e upper bonds levam a constantes, regra desnecessaria
	 | subrange=NUMERIC_SUBRANGE const=constant
;

structured_type:
	(packed?="packed")? type=unpacked_structured_type	
;

unpacked_structured_type:
	array=array_type 
	| record=record_type 
	| set=set_type 
	| file=file_type
;

array_type://index_type leva a simple_type e element_type leva a type, regras desnecessarias
	"array" "["indexes+=simple_type ("," indexes+=simple_type )*"]" "of" type=type
;

record_type:
	record="record" fields=field_list? end="end"	
; 

set_type: // base_type leva a type, regra desnecessaria
	"set" "of" type=type	
;

file_type: // file_component_type leva a type, regra desnecessaria
	"file" "of" type=type
;

pointer_type:
	"^" type=type
; 

//==============================
//===      Record Fields     ===
//==============================

field_list:
	(fixed=fixed_part (";" variants+=variant_part )? | variants+=variant_part) (";")? 
;

fixed_part:
	sections+=record_section (";" sections+=record_section)*
;

record_section:
	identifiers=identifier_list ":" type=type	
;

variant_part:
	"case" tag=tag_field? name=ID "of" variants+=variant (";" variants+=variant)*  	
;

tag_field:
	name=ID ":" 
;

variant:
	labels=case_label_list ":" "("fields=field_list?")"	
;

// Input/Output
// Pela gramatica nao existe nenhuma regra que leve até elas
// Nunca sao chamadas

// Variable and Identifier Categories
// Quase todas podem utilizar o modelo default ID, as que nao ja estao dentro de outras regras

//=====================================
//===     Low Level Definitions     ===
//=====================================

variable_identifier_list:
	names+=ID ("," names+=ID)*
;

identifier_list:
	ids+=ID ("," ids+=ID)*	
;

number:
	number=any_number	
;

any_number: // Numeros devem ser separados em com ou sem sinal
	unsigned_number 
	| signed_number	
;

unsigned_number returns any_number: // antes de serem separados em reais ou inteiros
	integer=INTEGER_NUMBER 
	| real=REAL_NUMBER	
;
 
signed_number returns any_number:
	integer=SIGNED_INTEGER_NUMBER 
	| real=SIGNED_REAL_NUMBER
;

terminal INTEGER_NUMBER: 
	UNSIGNED_DIGIT_SEQUENCE	
;

terminal REAL_NUMBER:
	UNSIGNED_DIGIT_SEQUENCE "." (UNSIGNED_DIGIT_SEQUENCE)? (("E" | "e") DIGIT_SEQUENCE)? 
	| UNSIGNED_DIGIT_SEQUENCE ("E" | "e") DIGIT_SEQUENCE	
;

terminal SIGNED_INTEGER_NUMBER:
	ADDITION_OPERATOR INTEGER_NUMBER	
;

terminal SIGNED_REAL_NUMBER:
	ADDITION_OPERATOR REAL_NUMBER
;

terminal DIGIT_SEQUENCE:
	ADDITION_OPERATOR? UNSIGNED_DIGIT_SEQUENCE	
;

terminal NUMERIC_SUBRANGE:
	( 
		INTEGER_NUMBER 
		| REAL_NUMBER 
		| SIGNED_INTEGER_NUMBER 
		| SIGNED_REAL_NUMBER
	) ".."	
;

terminal UNSIGNED_DIGIT_SEQUENCE:
	DIGIT+
;

terminal DIGIT:
	"0".."9"
;

label:
	number=SIGNED_INTEGER_NUMBER 
	| number=INTEGER_NUMBER
;

constant:
	opterator=ADDITION_OPERATOR ? 
	(
		name=ID 
		| number=number
	) 
	| string=STRING 
	| boolLiteral="true" 
	| boolLiteral="false" 
	| nil="nil"
;

case_label_list:
	constants+=constant ("," constants+=constant)*	
;

abstraction_declaration:
	procedure_declaration 
	| function_declaration	
;

abstraction_heading:
	procedure_heading 
	| function_heading 
;